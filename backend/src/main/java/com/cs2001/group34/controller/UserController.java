package com.cs2001.group34.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.cs2001.group34.model.User;
import com.cs2001.group34.processes.UserService;
import com.cs2001.group34.repository.UserRepository;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Optional;
  

@CrossOrigin
//Where Http Requests will be handled
@Controller // This means that this class is a Controller
@RequestMapping(path = "/") // This means URL's start with /get (after Application path)
public class UserController {
   // This means to get the bean called userRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  @Autowired
  private UserRepository userRepository;
  @Autowired
  private UserService userService;

//adding a user i.e. register a user

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody ResponseEntity<Object> addNewUser (@RequestParam String firstName, @RequestParam String lastName, @RequestParam String userName
      , @RequestParam String email, @RequestParam String password) throws NoSuchAlgorithmException {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
	  userService.registerUser(firstName, lastName, userName, email,password);
	 return new ResponseEntity<>("User was added successfully", HttpStatus.OK);
  }

  @PostMapping(path="/verify")
  public @ResponseBody ResponseEntity<Object> verifyUser(@RequestParam String email, @RequestParam String pin) throws NoSuchAlgorithmException{
	  userService.verifyUser(pin, email);
	
	  return new ResponseEntity<>("Pin matches, user was verified successfully", HttpStatus.OK);
	 
  }

  
  @PostMapping(path="/forgotten")
  public @ResponseBody ResponseEntity<Object> accountAssociatedWithEmail(@RequestParam String email){
	  try {
		userService.sendResetPasswordURL(email);
	} catch (IOException e) {
		e.printStackTrace();
		return new ResponseEntity<>("There was an error generating the url. Please try again", HttpStatus.INTERNAL_SERVER_ERROR);
		
	}
	  return new ResponseEntity<>("There is a user associated with this email", HttpStatus.OK);
  }
  
  @GetMapping(path="/all")
  //get ALL users
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }

  @PutMapping(value="/update/{id}")
  @ResponseBody ResponseEntity<Object> updatePassword(@PathVariable String id, @RequestParam("password") String password, @RequestParam String confirmPassword) throws NoSuchAlgorithmException {
	  boolean isUpdated =userService.changePassword(Integer.parseInt(id), password, confirmPassword);
	  if(isUpdated==true) {
		  return new ResponseEntity<>("Password updated successfully", HttpStatus.OK);
	  } else {
		  return new ResponseEntity<>("Password couldn't be updated", HttpStatus.INTERNAL_SERVER_ERROR);
	  }

  }
  

  @GetMapping(value="/userById/{id}")
  @ResponseBody
  public User getUserById(@PathVariable int id) { 
    // This returns a JSON or XML with the user information
    return userRepository.findUserById(id);
  }

  @RequestMapping(value = "/user/{id}", method = RequestMethod.DELETE)
  public ResponseEntity<Object> delete(@PathVariable("id") Integer id) { 
     userRepository.removeUser(id);
     return new ResponseEntity<>("User is deleted successsfully", HttpStatus.OK);

  }
  
  
//  @PutMapping(value="/profilePic/{id}") 
//  public void saveUserProfile(@PathVariable int id, @RequestParam("file") MultipartFile file)
//  {
//	  userService.saveUserProfile(file, id);
//  }
  
}